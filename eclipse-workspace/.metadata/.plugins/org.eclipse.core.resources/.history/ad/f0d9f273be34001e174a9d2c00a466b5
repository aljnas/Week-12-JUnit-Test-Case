package com.promineotech;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;

import java.util.stream.Stream;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.Arguments.*;
import org.junit.jupiter.params.provider.MethodSource;

   class TestDemoJUnitTest {
	
	private TestDemo testDemo;
	@BeforeEach
	void setUp() throws Exception {
		  testDemo = new TestDemo();
	}

	@ParameterizedTest
	public void assertThatTwoPositiveNumbersAreAddedCorrectly1(int a, int b, int expected, boolean expectException) {
		if (!expectException) {
		    assertThat(testDemo.addPositive(a, b)).isEqualTo(expected);
		}  else {
		        assertThatThrownBy(() -> testDemo.addPositive(a, b))
		             .isInstanceOf(IllegalArgumentException.class);}
		    }
		
		
		
		public static Stream<Arguments>argumentsForAddPositive() {
	
			return Stream.of(
					
					  Arguments.of(2, 4, 6, false),
			            Arguments.of(0, 5, 0, true), 
			            Arguments.of(-3, 7, 0, true), 
			            Arguments.of(-2, -4, 0, true) 
			            
			        );
			    }
					 
					
					
		

		@ParameterizedTest
	    @MethodSource("TestDemoJUnitTest#argumentsForAddPositive")
	    public void assertThatTwoPositiveNumbersAreAddedCorrectly(int a, int b, int expected, boolean expectException) {
	        if (!expectException) {
	            assertThat(testDemo.addPositive(a, b)).isEqualTo(expected);
	        } else {
	            assertThatThrownBy(() -> testDemo.addPositive(a, b))
	                .isInstanceOf(IllegalArgumentException.class);
	        }
	    }
	
}
